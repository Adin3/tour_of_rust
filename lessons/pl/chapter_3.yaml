- title: Rozdział 3 - Podstawowe Typy Struktur Danych
  content_markdown: >
    Najwyższy czas wyjść poza absolutnie podstawowe typy wbudowane!


    W tym rozdziale przyjrzymy się strukturom danych w Ruscie, skupiając się 
    zwłaszcza na aspekcie reprezentacji tych struktur w pamięci komputera. 


    Jestem pewien, że to jak niewiele Rust chowa przed programistą 
    bardzo Ci się spodoba.
- title: Struktury
  content_markdown: >
    Struktura oznaczona jako `struct` to zbiór pól.


    *Pole* to zwyczajnie pewna wartość reprezentująca pewną strukturę danych. 
    Wartość takiego *pola* może przyjmować postać prymitywnego typu wbudowanego
    lub innej struktury.


    Definicja struktur pozwala nam stworzyć pewnego rodzaju plan budowy który 
    zostanie później użyty przez kompilator w celu odpowiedniego ułożenia naszych
    struktur i ich pól w pamięci w wydajny sposób. 
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20%2F%2F%20String%20is%20a%20struct%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D
- title: Wywoływanie Metod
  content_markdown: >
    Metody to specjalny rodzaj funkcji, mianowicie takich które są przypisane
    do konkretnego typu.


    **metody statyczne** — metody które należą do samego typu wywołujemy używając
    operatora podwójnego dwukropka `::`.


    **metody instancji** — metody przynależące to konkretnej instancji danego typu
    wywołujemy za pomocą operatora kropki `.`.


    Więcej na temat tworzenia własnych metod powiemy w przyszłym rozdziale.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Using%20a%20static%20method%20to%20create%20an%20instance%20of%20String%0A%20%20%20%20let%20s%20%3D%20String%3A%3Afrom(%22Hello%20world!%22)%3B%0A%20%20%20%20%2F%2F%20Using%20a%20method%20on%20the%20instance%0A%20%20%20%20println!(%22%7B%7D%20is%20%7B%7D%20characters%20long.%22%2C%20s%2C%20s.len())%3B%0A%7D%0A
- title: Pamięć
  content_markdown: >
    Programy pisane w Ruscie mają do dyspozycji 3 rodzaje pamięci:


    * **dane** - Jest to pamięć przeznaczona dla danych *statycznych*, tj. takich
    które nie podlegają zmianom w trakcie trwania programu. 
      Wyobraź sobie tekst zadeklarowany w ramach prostego programu "Hello World!".
      Bajty użyte do przechowania prostego tekstu nie będą podlegać zmianom podczas trwania
      programu, mogą więc być odczytywane wielokrotnie z jednego regionu pamięci. 
      Właśnie ze względu na ich statyczny charakter, kompilator jest w stanie silnie
      zoptymalizować dostęp do tego typu danych.
    * **stos** - Pamięć gdzie przechowywane są zmienne wewnątrz funkcji. 
      Lokalizacja pamięci używanej przez stos pozostaje niezmieniona podczas całego czasu
      trwania wywołania funkcji. Oznacza to, że kompilator może dokonać pewnych optymalizacji
      przyspieszających korzystanie z tej pamięci. 
    * **sterta** - Pamięć tworzona na potrzeby programu podczas jego trwania. 
      W tym regionie pamięci dane mogą być na bieżąco dodawane, przenoszone, usuwane,
      przeskalowywane, itp. Ze względu na swoją dynamiczną naturę, sterta jest zwykle
      wolniejsza od stosu, ale zamiast tego pozwala na bardziej kreatywne wykorzystanie
      dostępnej pamięci. Kiedy dodajemy dane na stertę, taką operację nazywamy **alokacją**,
      natomiast kiedy dane usuwamy, wówczas mówimy o **dealokacji**.
- title: Tworzenie Danych w Pamięci
  content_markdown: >
    Kiedy tworzymy nową **instancję** pewnej **struktury** w naszym kodzie, nasz program
    inicjalizuje dla niej miejsce w pamięci komputera, układając dane kolejnych
    pól struktury w jednym ciągu, jedno obok drugiego.


    Nową instancję tworzymy wpisując nazwę struktury i dopisując jej elementy wewnątrz
    nawiasów klamrowych: `StructName { ... }`.

    Aby dostać się do pól istniejącej instancji struktury używamy operatora kropki `.`.


    Kilka ciekawostek dotyczących rozkładu struktur w pamięci:

    * Tekst wewnątrz cudzysłowu jest rozumiany jako *dane tylko do odczytu*, przez co
    odpowiednio ląduje w regionie pamięci przeznaczonym dla danych statycznych

    * Wywołanie funkcji `String::from` tworzy strukturę `String` która zostaje umieszczona
    obok innych pól obiektu `SeaCreature` na stosie. `String` reprezentuje tekst który może być
    zmieniony w trakcie trwania programu, co oznacza, że:
        * Stworzony zostaje obszar pamięci na stercie dla przechowania danych 
      reprezentujących modyfikowalny ciąg znaków
        * Przechowuje się na stosie referencję do miejsca na stercie gdzie przechowywane są te dane 
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature's%20data%20is%20on%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20is%20also%20on%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20but%20holds%20a%20reference%20to%20data%20on%20heap%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22crab%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22octopus%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%208%2C%0A%20%20%20%20%20%20%20%20legs%3A%200%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22none%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20is%20a%20%7B%7D.%20They%20have%20%7B%7D%20arms%2C%20%7B%7D%20legs%2C%20and%20a%20%7B%7D%20weapon%22%2C%0A%20%20%20%20%20%20%20%20ferris.name%2C%20ferris.animal_type%2C%20ferris.arms%2C%20ferris.legs%2C%20ferris.weapon%0A%20%20%20%20)%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20is%20a%20%7B%7D.%20They%20have%20%7B%7D%20arms%2C%20and%20%7B%7D%20legs.%20They%20have%20no%20weapon..%22%2C%0A%20%20%20%20%20%20%20%20sarah.name%2C%20sarah.animal_type%2C%20sarah.arms%2C%20sarah.legs%0A%20%20%20%20)%3B%0A%7D%0A
- title: Struktury Krotkowe
  content_markdown: |
    W celu zachowania zwięzłości, możemy tworzyć struktury przypominające w wyglądzie i użytkowaniu krotki.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20This%20is%20still%20a%20struct%20on%20a%20stack%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D%0A
- title: Puste Struktury
  content_markdown: >
    Nie ma żadnego powodu dla którego nie moglibyśmy stworzyć pustej struktury.


    Jak zaznaczyłem w Rozdziale 1, w Ruscie istnieje szeroko używany koncept pustej krotki `()`.
    Pusta struktura przypomina w praktyce właśnie pustą krotkę.


    Puste struktury nie są częstym widokiem w kodzie Rust.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Marker%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_m%20%3D%20Marker%3B%0A%7D%0A
- title: Wyliczenia
  content_markdown: >
    Wyliczenia tworzone z użyciem słowa kluczowego `enum` pozwalają na tworzenie nowych
    typów których wartość może być równa jednemu z określonych w ramach takiego typu elementów.
    

    Wyrażenie `match` pozwala nam na wyczerpujące dopasowanie każdego możliwego wariantu wyliczenia.
    Kombinacja wyliczeń i wyrażenia `match` to jedna z kluczowych metod tworzenia wysokiej jakości
    kodu w języku Rust.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20println!(%22%7B%7D%20is%20a%20crab%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AOctopus%20%3D%3E%20println!(%22%7B%7D%20is%20a%20octopus%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AFish%20%3D%3E%20println!(%22%7B%7D%20is%20a%20fish%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AClam%20%3D%3E%20println!(%22%7B%7D%20is%20a%20clam%22%2Cferris.name)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: Wyliczenia Zawierające Dane
  content_markdown: >
    Wyliczenia `enum` mogą w ramach swoich elementów zawierać inne typy danych. 
    Przypomina to typ *unii* (ang. *union*) znany z języka C.


    Podczas stosowania wyrażenia `match` na wyliczeniu `enum`, dostajemy możliwość
    przypisania wartości przechowywanych wewnątrz wyliczenia do tymczasowych zmiennych.


    Kilka rzeczy na które warto zwrócić uwagę jeżeli chodzi o reprezentację wyliczeń w pamięci komputera:

    * Wielkość danej typu wyliczenie `enum` w pamięci będzie wynosić tyle co największy
    zdefiniowany element tego wyliczenia. To pozwala na zmieszczenie wszystkich potencjalnych
    wartości wyliczenia w jednym obszarze pamięci o pewnej konkretnej wielkości

    * Oprócz widocznego dla programisty samego elementu z potencjalnymi 
    przypisanymi typami danych, każdy element wyliczenia określa również typ liczbowy
    pozwalający na identyfikację danego elementu w ramach wyliczenia


    Dodatkowo:

    * Wyliczenia `enum` w Ruscie są czasem nazywane *tagowanymi uniami* (ang. *tagged unions*), ze względu na wspomnianą już
    unikalną charakterystykę pozwalającą na trzymanie danych wewnątrz elementów
    
    * Mówi się, że Rust posiada *typy algebraiczne* (ang. *algebraic types*). Oznacza to mniej więcej tyle, że możliwe jest
    kombinowanie typów w celu stworzenia z nich pewnego nowego typu.
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%20Crab%2C%20Octopus%2C%20Fish%2C%20Clam%20%7D%0Aenum%20PoisonType%20%7B%20Acidic%2C%20Painful%2C%20Lethal%20%7D%0Aenum%20Size%20%7B%20Big%2C%20Small%20%7D%0Aenum%20Weapon%20%7B%0A%20%20%20%20Claw(i32%2C%20Size)%2C%0A%20%20%20%20Poison(PoisonType)%2C%0A%20%20%20%20None%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20Weapon%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature's%20data%20is%20on%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20is%20also%20on%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20but%20holds%20a%20reference%20to%20data%20on%20heap%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20Weapon%3A%3AClaw(2%2C%20Size%3A%3ASmall)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20match%20ferris.weapon%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Weapon%3A%3AClaw(num_claws%2Csize)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20size_description%20%3D%20match%20size%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ABig%20%3D%3E%20%22big%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ASmall%20%3D%3E%20%22small%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!(%22ferris%20is%20a%20crab%20with%20%7B%7D%20%7B%7D%20claws%22%2C%20num_claws%2C%20size_description)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20is%20a%20crab%20with%20some%20other%20weapon%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20is%20some%20other%20animal%22)%2C%0A%20%20%20%20%7D%0A%7D
- title: Rozdział 3 - Podsumowanie
  content_markdown: >
    Ale super! Mamy już podstawowe narzędzia do reprezentowania bardziej skomplikowanych
    konstrukcji i idei w kodzie. 


    Mam nadzieję, że wszystkie dotychczas omówione elementy zaczynają tworzyć pewną
    całość i że zaczynasz dostrzegać potencjał Rusta. 


    W następnym rozdziale przyjrzymy się bardzo ciekawemu aspektowi języka, który 
    pozwoli nam programować w jeszcze bardziej elastyczny sposób.
    Mowa oczywiście o notacji *generycznej*. 
