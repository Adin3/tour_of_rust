- title: 第三章 - 基本資料結構 (data structures)
  content_markdown: >
    是時候讓我們探討基本型別了！在這個章節，我們將會看看 Rust 裡最原始的資料結構，特別注意它們在記憶體裡是如何呈現的。
    我想你會享受到 Rust 替你隱藏起來的東西有多麼少。
- title: 結構 (structures)
  content_markdown: >
    一個 `struct` 是一群欄位 (field) 的集合。


    一個*欄位* (field) 就只是一個在結構裡的數值。它的數值可以是最原始的型別，也可以是另一種資料結構。


    它的定義就像是一張藍圖一樣，讓編譯器 (compiler) 可以在記憶體裡畫出欄位之間如何擺放。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20%2F%2F%20String%20is%20a%20struct%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D
- title: 呼叫方法 (method)
  content_markdown: >
    不同於函數 (function)，方法 (method) 是有著特定資料型別的函數。


    **靜態方法** (static method)：屬於型別自己本身的方法，使用 `::` 來呼叫。


    **實體方法** (instance method)：屬於某種型別的實體方法，使用 `.` 來呼叫。


    後續章節我們將會探討更多關於如何產生你自己的方法。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=fn%20main()%20%7B%0A%20%20%20%20%2F%2F%20Using%20a%20static%20method%20to%20create%20an%20instance%20of%20String%0A%20%20%20%20let%20s%20%3D%20String%3A%3Afrom(%22Hello%20world!%22)%3B%0A%20%20%20%20%2F%2F%20Using%20a%20method%20on%20the%20instance%0A%20%20%20%20println!(%22%7B%7D%20is%20%7B%7D%20characters%20long.%22%2C%20s%2C%20s.len())%3B%0A%7D%0A
- title: 記憶體 (memory)
  content_markdown: >
    Rust 程式裡有三塊記憶體區塊用來儲存資料：

    * **資料記憶體** (data memory)：有著固定大小且是**靜態** (即整個程式的生週期裡都可以存取) 的資料。
      例如你程式裡的一段文字 (例如："Hello World!")：這段文字的位元組 (bytes) 只會從一個固定的地方被讀取，因此它可以被儲存在這個區塊。
      編譯器在這類型的資料上做了許多優化，因為它們的位址是已知且固定，所以通常可以很快速的取得。
    * **堆疊記憶體** (stack memory)：在函數裡宣告為變量的資料。
      在一個函數呼叫裡，這類記憶體的位址永遠不會變動，因此編譯器可以對此做優化，使得堆疊資料可以快速被存取。
    * **堆記憶體** (heap memory)：當應用程式正在運行時所創建的資料。
      在此區塊的資料可能會新增、移動、移除、更改大小…等等。因為它的動態特性，使得它們一般被認為在使用上是比較慢的。
      但是也讓使用者可以有更多有創意的方式使用記憶體。
      當資料被新增到此區塊，我們稱之為**分配** (allocation)。當資料從此區塊被移除，我們稱之為**回收** (deallocation)。
- title: 在記憶體裡創建資料
  content_markdown: >
    當我們在程式碼裡**實體化** (instantiate) 一個**結構** (struct) 時，我們的程式將在記憶體裡產生相鄰的欄位資料。


    我們透過指定所有欄位數值來實體化


    `StructName { ... }`.


    結構裡的欄位可以透過 `.` 被存取。


    以下說明範例的細節：

    * 在雙引號內的文字是唯讀資料 (例如 "Ferris")，因此它被放在**資料記憶體區塊** (data memory region) 裡。
    
    * 呼叫 `String::from` 函數將產生一個 `String` 結構，它跟其他 SeaCreature 的欄位相鄰擺在一起，並放在*堆疊* (stack)。
      一個字串表示一段文字，而且透過以下方式被更改：
      1. 在*堆* (heap) 上產生記憶體給文字使用，而且可以被更改
      2. 將*堆*的記憶體位址存在參考 (reference) 裡，並且儲存在 `String` 結構裡 (後續章節會更詳細說明)
    * 最後，我們的兩個朋友 *Ferris* 及 *Sarah* 在我們的程式裡都擁有固定位置的資料結構，所以它們被擺在**堆疊** (stack) 裡。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20SeaCreature%20%7B%0A%20%20%20%20animal_type%3A%20String%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature%27s%20data%20is%20on%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20is%20also%20on%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20but%20holds%20a%20reference%20to%20data%20on%20heap%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22crab%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20let%20sarah%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20animal_type%3A%20String%3A%3Afrom(%22octopus%22)%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Sarah%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%208%2C%0A%20%20%20%20%20%20%20%20legs%3A%200%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22brain%22)%2C%0A%20%20%20%20%7D%3B%0A%20%20%20%20%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20is%20a%20%7B%7D.%20They%20have%20%7B%7D%20arms%2C%20%7B%7D%20legs%2C%20and%20a%20%7B%7D%20weapon%22%2C%0A%20%20%20%20%20%20%20%20ferris.name%2C%20ferris.animal_type%2C%20ferris.arms%2C%20ferris.legs%2C%20ferris.weapon%0A%20%20%20%20)%3B%0A%20%20%20%20println!(%0A%20%20%20%20%20%20%20%20%22%7B%7D%20is%20a%20%7B%7D.%20They%20have%20%7B%7D%20arms%2C%20and%20%7B%7D%20legs.%20They%20have%20no%20weapon..%22%2C%0A%20%20%20%20%20%20%20%20sarah.name%2C%20sarah.animal_type%2C%20sarah.arms%2C%20sarah.legs%0A%20%20%20%20)%3B%0A%7D%0A
- title: 數組型結構 (tuple-like)
  content_markdown: |
    更簡潔的說，你可以產生用起來像數組 (tuple) 的結構。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Location(i32%2C%20i32)%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20This%20is%20still%20a%20struct%20on%20a%20stack%0A%20%20%20%20let%20loc%20%3D%20Location(42%2C%2032)%3B%0A%20%20%20%20println!(%22%7B%7D%2C%20%7B%7D%22%2C%20loc.0%2C%20loc.1)%3B%0A%7D%0A
- title: 單組型結構 (unit-like)
  content_markdown: >
    沒有任何欄位的結構即是單組 (unit)。


    如同在第一章所提到的，一個*單組* (unit) 即是空數組 `()` 的另一種說法。
    這也是為什麼這類型的結構稱之為*單組型* (unit-like)。


    這類型的結構甚少使用。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=struct%20Marker%3B%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20_m%20%3D%20Marker%3B%0A%7D%0A
- title: 列舉 (enumerations)
  content_markdown: >
    列舉允許你產生新的型別，此型別可以有多個被標記的元素，而這些元素使用 `enum` 關鍵字宣告。


    `match` 徹底的保證所有可能的列舉數值都會被掌控，這使得它成為一個強大的工具用來保證有品質的程式碼。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%0A%20%20%20%20Crab%2C%0A%20%20%20%20Octopus%2C%0A%20%20%20%20Fish%2C%0A%20%20%20%20Clam%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20String%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20String%3A%3Afrom(%22claw%22)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20println!(%22%7B%7D%20is%20a%20crab%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AOctopus%20%3D%3E%20println!(%22%7B%7D%20is%20a%20octopus%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AFish%20%3D%3E%20println!(%22%7B%7D%20is%20a%20fish%22%2Cferris.name)%2C%0A%20%20%20%20%20%20%20%20Species%3A%3AClam%20%3D%3E%20println!(%22%7B%7D%20is%20a%20clam%22%2Cferris.name)%2C%0A%20%20%20%20%7D%0A%7D%0A
- title: 列舉與資料
  content_markdown: >
    `enum` 元素可以有一個或多個資料型別，這使得它們就像 C 語言裡的 *union* 一樣。


    當一個 `enum` 被 `match` 匹配到時，你可以將一個變量名綁定到每一個資料數值。


    `enum` 的記憶體詳細說明：

    * 一個列舉資料數值會擁有一塊記憶體大小，而該大小等同於最大的元素。這允許所有可能的數值都可以放進同樣的記憶體空間。

    * 除了元素的資料型別 (如果有的話)，每一個元素同時都還擁有一個數值用來表示他是哪個標籤。


    其他細節：

    * Rust 的 `enum` 也被稱作*標記聯合* (tagged union)。

    * 型別組合在一起產生新的型別，即是人們所說 Rust 擁有*代數型別* (algebraic types)。
  code: >-
    https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&code=%23!%5Ballow(dead_code)%5D%20%2F%2F%20this%20line%20prevents%20compiler%20warnings%0A%0Aenum%20Species%20%7B%20Crab%2C%20Octopus%2C%20Fish%2C%20Clam%20%7D%0Aenum%20PoisonType%20%7B%20Acidic%2C%20Painful%2C%20Lethal%20%7D%0Aenum%20Size%20%7B%20Big%2C%20Small%20%7D%0Aenum%20Weapon%20%7B%0A%20%20%20%20Claw(i32%2C%20Size)%2C%0A%20%20%20%20Poison(PoisonType)%2C%0A%20%20%20%20None%0A%7D%0A%0Astruct%20SeaCreature%20%7B%0A%20%20%20%20species%3A%20Species%2C%0A%20%20%20%20name%3A%20String%2C%0A%20%20%20%20arms%3A%20i32%2C%0A%20%20%20%20legs%3A%20i32%2C%0A%20%20%20%20weapon%3A%20Weapon%2C%0A%7D%0A%0Afn%20main()%20%7B%0A%20%20%20%20%2F%2F%20SeaCreature's%20data%20is%20on%20stack%0A%20%20%20%20let%20ferris%20%3D%20SeaCreature%20%7B%0A%20%20%20%20%20%20%20%20%2F%2F%20String%20struct%20is%20also%20on%20stack%2C%0A%20%20%20%20%20%20%20%20%2F%2F%20but%20holds%20a%20reference%20to%20data%20on%20heap%0A%20%20%20%20%20%20%20%20species%3A%20Species%3A%3ACrab%2C%0A%20%20%20%20%20%20%20%20name%3A%20String%3A%3Afrom(%22Ferris%22)%2C%0A%20%20%20%20%20%20%20%20arms%3A%202%2C%0A%20%20%20%20%20%20%20%20legs%3A%204%2C%0A%20%20%20%20%20%20%20%20weapon%3A%20Weapon%3A%3AClaw(2%2C%20Size%3A%3ASmall)%2C%0A%20%20%20%20%7D%3B%0A%0A%20%20%20%20match%20ferris.species%20%7B%0A%20%20%20%20%20%20%20%20Species%3A%3ACrab%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20match%20ferris.weapon%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Weapon%3A%3AClaw(num_claws%2Csize)%20%3D%3E%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20let%20size_description%20%3D%20match%20size%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ABig%20%3D%3E%20%22big%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20Size%3A%3ASmall%20%3D%3E%20%22small%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%3B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20println!(%22ferris%20is%20a%20crab%20with%20%7B%7D%20%7B%7D%20claws%22%2C%20num_claws%2C%20size_description)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20is%20a%20crab%20with%20some%20other%20weapon%22)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20_%20%3D%3E%20println!(%22ferris%20is%20some%20other%20animal%22)%2C%0A%20%20%20%20%7D%0A%7D
- title: 第三章 - 總結
  content_markdown: >
    多麼令人興奮！現在我們有了最基本的工具，可以用來將我們的點子以程式碼的方式呈現出來。
    但願現在我們能看到些許 Rust 的基礎操作是如此簡潔和諧的與它的型別一起工作。
    接下來我們會探討一個概念，它可以讓我們的資料型別在呈現上更有彈性：*泛型* (generics)。
